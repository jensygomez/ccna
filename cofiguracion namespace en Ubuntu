#!/bin/bash

# Verificar que se ejecute como root
if [ "$(id -u)" -ne 0 ]; then
    echo "Este script debe ejecutarse como root" >&2
    exit 1
fi

set -e # Salir ante cualquier error

# Función para validar IP
validate_ip() {
    local ip=$1
    local stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 && \
           ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

# Limpieza inicial
echo -e "\n[+] Limpiando configuraciones previas..."
for ns in $(ip netns list | awk '{print $1}'); do
    ip netns del "$ns" 2>/dev/null || true
done

# Listar interfaces disponibles
interfaces=($(ip link show | awk -F': ' '/^[0-9]+: e/ {print $2}' | grep -vE '^(lo|docker|virbr)'))

if [ ${#interfaces[@]} -eq 0 ]; then
    echo "Error: No se encontraron interfaces físicas disponibles" >&2
    exit 1
fi

echo -e "\n[+] Interfaces de red disponibles:"
for i in "${!interfaces[@]}"; do
    echo "$((i+1)). ${interfaces[$i]}"
done

# Preguntar cantidad de hosts
read -p $'\n¿Cuántos hosts deseas configurar? (1-10): ' host_count

if ! [[ "$host_count" =~ ^[1-9]$|^10$ ]]; then
    echo "Cantidad inválida. Debe ser entre 1 y 10." >&2
    exit 1
fi

# Configurar cada host
for ((i=1; i<=host_count; i++)); do
    echo -e "\n--- Configurando host$i ---"
    
    # Seleccionar interfaz
    while true; do
        read -p "Selecciona el número de interfaz para host$i (1-${#interfaces[@]}): " iface_num
        if [[ "$iface_num" =~ ^[0-9]+$ ]] && [ "$iface_num" -ge 1 ] && [ "$iface_num" -le ${#interfaces[@]} ]; then
            iface=${interfaces[$((iface_num-1))]}
            break
        else
            echo "Selección inválida. Intenta nuevamente."
        fi
    done

    # Solicitar IP
    while true; do
        read -p "Ingresa la IP para host$i (ej. 192.168.1.10/24): " ip_addr
        if [[ "$ip_addr" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/[0-9]+$ ]] && validate_ip "${ip_addr%/*}"; then
            break
        else
            echo "Formato de IP inválido. Usa formato CIDR (ej. 192.168.1.10/24)"
        fi
    done

    # Solicitar gateway
    while true; do
        read -p "Ingresa el gateway para host$i (ej. 192.168.1.1): " gateway
        if validate_ip "$gateway"; then
            break
        else
            echo "Dirección IP inválida. Intenta nuevamente."
        fi
    done

    # Crear namespace y configurar
    echo -e "\n[+] Configurando host$i..."
    ip netns add "host$i"
    ip link set "$iface" netns "host$i"
    ip netns exec "host$i" ip addr add "$ip_addr" dev "$iface"
    ip netns exec "host$i" ip link set "$iface" up
    ip netns exec "host$i" ip link set lo up
    ip netns exec "host$i" ip route add default via "$gateway"

    echo "host$i configurado:"
    echo "  - Interfaz: $iface"
    echo "  - IP: $ip_addr"
    echo "  - Gateway: $gateway"
done

echo -e "\n[+] Configuración completada!"
echo "Puedes verificar la conectividad con comandos como:"
echo "  ip netns exec host1 ping <IP>"
echo "  ip netns exec host1 ip addr show"
echo "  ip netns exec host1 ip route show"

exit 0
